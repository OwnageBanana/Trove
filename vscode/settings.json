{
  "gitlab.enableExperimentalFeatures": true,
  "gitlab.instanceUrl": "https://gitlab.talkatoo.ai/",
  "go.formatTool": "gofmt",
  "markdown-preview-enhanced.previewTheme": "atom-dark.css",
  "workbench.preferredHighContrastColorTheme": "Default Dark+",
  "workbench.preferredLightColorTheme": "Default Dark+",
  "editor.tabSize": 2,
  "javascript.format.insertSpaceBeforeFunctionParenthesis": true,
  "git.enableSmartCommit": true,
  "tailwindCSS.emmetCompletions": true,
  "tailwindCSS.includeLanguages": {
    "plaintext": "html",
    "vue": "vue"
  },
  "[javascript]": {
    "editor.defaultFormatter": "vscode.typescript-language-features"
  },
  "liveshare.connectionMode": "relay",
  "cSpell.userWords": [
    "Bouldering",
    "chargify",
    "concat",
    "curr",
    "devs",
    "gitlab",
    "gpio",
    "hubspot",
    "mixpanel",
    "mkdir",
    "onfailure",
    "protoc",
    "redeclaring",
    "rgba",
    "rustfmt",
    "Signup",
    "Talkatoo",
    "unshift",
    "Vuex"
  ],
  "cSpell.enableFiletypes": [
    "go",
    "markdown",
    "proto3",
    "vue"
  ],
  "cSpell.enabledLanguageIds": [
    "asciidoc",
    "c",
    "cpp",
    "csharp",
    "css",
    "git-commit",
    "go",
    "graphql",
    "handlebars",
    "haskell",
    "html",
    "jade",
    "java",
    "javascript",
    "javascriptreact",
    "json",
    "jsonc",
    "latex",
    "less",
    "markdown",
    "php",
    "plaintext",
    "python",
    "pug",
    "restructuredtext",
    "rust",
    "scala",
    "scss",
    "text",
    "typescript",
    "typescriptreact",
    "yaml",
    "yml",
    "go"
  ],
  "editor.accessibilitySupport": "off",
  "gitlens.hovers.currentLine.over": "line",
  "gitlens.hovers.enabled": false,
  "workbench.editor.highlightModifiedTabs": true,
  "workbench.editor.pinnedTabSizing": "shrink",
  "vetur.validation.templateProps": true,
  "tailwindCSS.colorDecorators": true,
  "editor.codeActionsOnSave": null,
  "editor.autoClosingBrackets": "always",
  "editor.autoClosingQuotes": "always",
  "editor.formatOnSaveMode": "modifications",
  "diffEditor.ignoreTrimWhitespace": false,
  "diffEditor.maxComputationTime": 0,
  "editor.minimap.showSlider": "always",
  "editor.suggest.showStatusBar": true,
  "files.trimTrailingWhitespace": true,
  "html-css-class-completion.enableEmmetSupport": true,
  "html.format.wrapAttributes": "auto",
  "html.format.wrapLineLength": 0,
  "[vue]": {
    "editor.defaultFormatter": "Vue.volar"
  },
  "html.format.enable": false,
  "vetur.format.defaultFormatterOptions": {
    "prettier": {
      "printWidth": 3000,
    },
    "js-beautify-html": {
      "wrap_attributes": "force-expand-multiline"
    },
    "prettyhtml": {
      "printWidth": 3000,
      "singleQuote": false,
      "wrapAttributes": false,
      "sortAttributes": false,
    }
  },
  "go.toolsManagement.autoUpdate": true,
  "go.autocompleteUnimportedPackages": true,
  "go.installDependenciesWhenBuilding": true,
  "bracketPairColorizer.forceIterationColorCycle": false,
  "security.workspace.trust.untrustedFiles": "open",
  "formate.additionalSpaces": 1,
  "formate.verticalAlignProperties": false,
  "beautify.options": {},
  "[css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "vetur.format.defaultFormatter.js": "vscode-typescript",
  "vetur.format.defaultFormatter.html": "none",
  "files.associations": {
    "*.css": "css"
  },
  "vetur.format.defaultFormatter.ts": "vscode-typescript",
  "auto-comment-blocks.disabledLanguages": [],
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "bracketPairColorizer.colorMode": "Independent",
  "bracketPairColorizer.excludedLanguages": [
    "*.html",
    "*.vue"
  ],
  "bracketPairColorizer.colors": [
    "Gold",
    "Orchid",
    "LightSkyBlue"
  ],
  "[csv]": {
    "bracketLens.mode": "manual"
  },
  "svg.preview.mode": "img",
  "files.exclude": {
    ".git": true,
    "**/.git": false
  },
  "editor.fontFamily": "'IBM Plex Mono', Consolas, 'Courier New', monospace",
  "hexeditor.columnWidth": 32,
  "hexeditor.showDecodedText": true,
  "hexeditor.defaultEndianness": "little",
  "hexeditor.inspectorType": "aside",
  "git.autofetch": true,
  "modaledit.keybindings": {
    "i": "modaledit.enterInsert",
    ".": "modaledit.enterInsert",
    "I": [
      "cursorHome",
      "modaledit.enterInsert"
    ],
    "a": [
      {
        "condition": "__char == ''",
        "false": "cursorRight"
      },
      "modaledit.enterInsert"
    ],
    "A": [
      "cursorEnd",
      "modaledit.enterInsert"
    ],
    "o": [
      "editor.action.insertLineAfter",
      "modaledit.enterInsert"
    ],
    "O": [
      "editor.action.insertLineBefore",
      "modaledit.enterInsert"
    ],
    "v": "modaledit.toggleSelection",
    "V": "expandLineSelection",
    "h": {
      "command": "cursorMove",
      "args": "{ to: 'left', select: __selecting }"
    },
    "K": {
      "command": "cursorMove",
      "args": "{ to: 'viewPortTop', select: __selecting }"
    },
    "j": {
      "command": "cursorMove",
      "args": "{ to: 'down', select: __selecting }"
    },
    "k": {
      "command": "cursorMove",
      "args": "{ to: 'up', select: __selecting }"
    },
    "l": {
      "command": "cursorMove",
      "args": "{ to: 'right', select: __selecting }"
    },
    "J": {
      "command": "cursorMove",
      "args": "{ to: 'viewPortBottom', select: __selecting }"
    },
    "M": {
      "command": "cursorMove",
      "args": "{ to: 'viewPortCenter', select: __selecting }"
    },
    "w": {
      "condition": "__selecting",
      "true": "cursorWordStartRightSelect",
      "false": "cursorWordStartRight"
    },
    "W": {
      "command": "cursorWordStartRight",
      "repeat": "__char.match(/\\W/)"
    },
    "b": {
      "condition": "__selecting",
      "true": "cursorWordStartLeftSelect",
      "false": "cursorWordStartLeft"
    },
    "B": {
      "command": "cursorWordStartLeft",
      "repeat": "__char.match(/\\W/)"
    },
    "e": {
      "condition": "__selecting",
      "true": "cursorWordEndRightSelect",
      "false": "cursorWordEndRight"
    },
    "0": {
      "command": "cursorMove",
      "args": "{ to: 'wrappedLineStart', select: __selecting }"
    },
    "%": {
      "condition": "__selecting",
      "true": "editor.action.smartSelect.expand",
      "false": "editor.action.jumpToBracket"
    },
    "^": {
      "command": "cursorMove",
      "args": "{ to: 'wrappedLineFirstNonWhitespaceCharacter', select: __selecting }"
    },
    "$": {
      "command": "cursorMove",
      "args": "{ to: 'wrappedLineEnd', select: __selecting }"
    },
    "+": [
      {
        "command": "cursorMove",
        "args": "{ to: 'down', select: __selecting }"
      },
      {
        "command": "cursorMove",
        "args": "{ to: 'wrappedLineFirstNonWhitespaceCharacter', select: __selecting }"
      }
    ],
    "-": [
      {
        "command": "cursorMove",
        "args": "{ to: 'up', select: __selecting }"
      },
      {
        "command": "cursorMove",
        "args": "{ to: 'wrappedLineFirstNonWhitespaceCharacter', select: __selecting }"
      }
    ],
    "g": {
      "_": {
        "command": "cursorMove",
        "args": "{ to: 'wrappedLineLastNonWhitespaceCharacter', select: __selecting }"
      },
      "g": {
        "condition": "__selecting",
        "true": "cursorTopSelect",
        "false": "cursorTop"
      },
      "t": "workbench.action.nextEditor",
      "T": "workbench.action.previousEditor"
    },
    "G": {
      "condition": "__selecting",
      "true": "cursorBottomSelect",
      "false": "cursorBottom"
    },
    "f": {
      "condition": "__selecting",
      "true": {
        "command": "modaledit.search",
        "args": {
          "caseSensitife": true,
          "acceptAfter": 1,
          "selectTillMatch": true,
        }
      },
      "false": {
        "command": "modaledit.search",
        "args": {
          "caseSensitive": true,
          "acceptAfter": 1,
          "typeAfterAccept": "h",
        }
      },
    },
    "F": {
      "condition": "__selecting",
      "true": {
        "command": "modaledit.search",
        "args": {
          "caseSensitive": true,
          "acceptAfter": 1,
          // "selectTillMatch": true,
          "backwards": true,
        }
      },
      "false": {
        "command": "modaledit.search",
        "args": {
          "caseSensitive": true,
          "acceptAfter": 1,
          "typeAfterAccept": "h",
          "backwards": true
        }
      },
    },
    ";": "modaledit.nextMatch",
    ",": "modaledit.previousMatch",
    "z": {
      "z": {
        "command": "revealLine",
        "args": "{ lineNumber: __line, at: 'center' }"
      }
    },
    "u": [
      {
        "command": "cursorMove",
        "args": "{ to: 'viewPortCenter', select: __selecting }"
      },
      {
        "command": "revealLine",
        "args": "{ lineNumber: __line, at: 'center' }"
      },
      {
        "command": "cursorMove",
        "args": "{ to: 'viewPortTop', select: __selecting }",
        "when": "editorTextFocus && modaledit.normal"
      },
      {
        "command": "revealLine",
        "args": "{ lineNumber: __line, at: 'center' }"
      }
    ],
    "U": [
      {
        "command": "cursorPageUp",
        "when": "editorTextFocus && modaledit.normal"
      },
      {
        "command": "revealLine",
        "args": "{ lineNumber: __line, at: 'center' }"
      }
    ],
    "d": [
      {
        "command": "cursorMove",
        "args": "{ to: 'viewPortCenter', select: __selecting }"
      },
      {
        "command": "revealLine",
        "args": "{ lineNumber: __line, at: 'center' }"
      },
      {
        "command": "cursorMove",
        "args": "{ to: 'viewPortBottom', select: __selecting }",
        "when": "editorTextFocus && modaledit.normal"
      },
      {
        "command": "revealLine",
        "args": "{ lineNumber: __line, at: 'center' }"
      }
    ],
    "D": [
      {
        "command": "cursorPageDown",
        "when": "editorTextFocus && modaledit.normal"
      },
      {
        "command": "revealLine",
        "args": "{ lineNumber: __line, at: 'center' }"
      }
    ],
    ":": {
      ":": {},
      "id": 1,
      "help": "Enter a line number",
      "0-9": 1,
      ":,`": [
        {
          "command": "revealLine",
          "args": "{ lineNumber: Number(__keys.slice(1, -1).join('')) - 1, at: 'top' }"
        },
        {
          "command": "cursorMove",
          "args": {
            "to": "viewPortTop"
          }
        },
        {
          "command": "revealLine",
          "args": "{ lineNumber: __line, at: 'center' }"
        }
      ]
    },
    "1-9": {
      "id": 1,
      "help": "Enter count followed by [h,j,k,l,w,b,e,V]",
      "0-9": 1,
      "h,j,k,l,w,b,e": {
        "command": "modaledit.typeNormalKeys",
        "args": "{ keys: __keys[__keys.length - 1] }",
        "repeat": "Number(__keys.slice(0, -1).join(''))"
      },
      "V": {
        "command": "modaledit.typeNormalKeys",
        "args": "{ keys: __keys[__keys.length - 1] }",
        "repeat": "Number(__keys.slice(0, -1).join('')) + 1"
      },
      "G": [
        {
          "command": "revealLine",
          "args": "{ lineNumber: Number(__keys.slice(0, -1).join('')) - 1, at: 'top' }"
        },
        {
          "command": "cursorMove",
          "args": {
            "to": "viewPortTop"
          }
        },
        {
          "command": "revealLine",
          "args": "{ lineNumber: __line, at: 'center' }"
        }
      ]
    },
    "C": [
      "deleteAllRight",
      "modaledit.enterInsert"
    ],
    "c": {
      "c": [
        "deleteAllLeft",
        "deleteAllRight",
        "modaledit.enterInsert"
      ],
      "$": [
        "deleteAllRight",
        "modaledit.enterInsert"
      ],
      "w": [
        "deleteWordEndRight",
        "modaledit.enterInsert"
      ],
      "t,f": {
        "help": "Change until _",
        " -~": [
          {
            "command": "modaledit.selectBetween",
            "args": "{ to: __keys[2], inclusive: __keys[1] == 'f', docScope: true }"
          },
          "deleteLeft",
          "modaledit.enterInsert"
        ]
      },
      "a,i": {
        "help": "Change around/inside _",
        " -/,:-@,[-`,{-~": [
          {
            "command": "modaledit.selectBetween",
            "args": "{ from: __keys[2], to: __keys[2], inclusive: __keys[1] == 'a', docScope: true }"
          },
          "deleteLeft",
          "modaledit.enterInsert"
        ],
        "(,)": [
          {
            "command": "modaledit.selectBetween",
            "args": "{ from: '(', to: ')', inclusive: __keys[1] == 'a',docScope: true }"
          },
          "deleteLeft",
          "modaledit.enterInsert"
        ],
        "{,}": [
          {
            "command": "modaledit.selectBetween",
            "args": "{ from: '{', to: '}', inclusive: __keys[1] == 'a',docScope: true }"
          },
          "deleteLeft",
          "modaledit.enterInsert"
        ],
        "[,]": [
          {
            "command": "modaledit.selectBetween",
            "args": "{ from: '[', to: ']', inclusive: __keys[1] == 'a',docScope: true }"
          },
          "deleteLeft",
          "modaledit.enterInsert"
        ],
        "<,>": [
          {
            "command": "modaledit.selectBetween",
            "args": "{ from: '<', to: '>', inclusive: __keys[1] == 'a',docScope: true }"
          },
          "deleteLeft",
          "modaledit.enterInsert"
        ],
        "w": [
          {
            "command": "modaledit.selectBetween",
            "args": "{ from: '\\\\W', to: '\\\\W', regex: true, inclusive: __keys[1] == 'a',docScope: true }"
          },
          "deleteLeft",
          "modaledit.enterInsert"
        ],
        "W": [
          {
            "command": "modaledit.selectBetween",
            "args": "{ from: ' ', to: ' ', regex: true, inclusive: __keys[1] == 'a'}"
          },
          "deleteLeft",
          "modaledit.enterInsert"
        ],
      },
    },
    "s": [
      "deleteRight",
      "modaledit.enterInsert"
    ],
    "S": [
      "deleteAllLeft",
      "deleteAllRight",
      "modaledit.enterInsert"
    ],
    "~": {
      "condition": "__selection == __selection.toUpperCase()",
      "true": "editor.action.transformToLowercase",
      "false": "editor.action.transformToUppercase"
    },
    "m": {
      "a-z,1-9": {
        "command": "modaledit.defineBookmark",
        "args": "{ bookmark: __keys[1] }"
      }
    },
    "`": {
      "a-z,1-9": [
        {
          "command": "modaledit.goToBookmark",
          "args": "{ bookmark: __keys[1] }"
        },
        {
          "command": "revealLine",
          "args": "{ lineNumber: __line, at: 'center' }"
        }
      ]
    },
    "/": {
      "command": "modaledit.search",
      "args": {
        "caseSensitive": true
      }
    },
    "?": {
      "command": "modaledit.search",
      "args": {
        "caseSensitive": true,
        "backwards": true
      }
    },
    "n": "modaledit.nextMatch",
    "N": "modaledit.previousMatch",
    "x": "deleteRight",
    "X": "deleteLeft",
    "r,s": [
      "deleteRight",
      "modaledit.enterInsert"
    ],
    "S": {
      "command": "modaledit.typeNormalKeys",
      "args": {
        "keys": "cc"
      }
    },
  },
  "editor.lineNumbers": "relative",
  "search.showLineNumbers": true,
  "editor.glyphMargin": false,
  "git.mergeEditor": false,
  "workbench.colorTheme": "Gruvbox Dark (Hard)",
  "debug.allowBreakpointsEverywhere": true,
  "better-comments.tags": [
    {
      "tag": "!",
      "color": "#FF2D00",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "?",
      "color": "#3498DB",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "//",
      "color": "#474747",
      "strikethrough": true,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "todo",
      "color": "#FF8C00",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "*",
      "color": "#98C379",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": ">",
      "color": "#D3869B",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": true
    },
  ],
  "window.zoomLevel": 1
}